module type X_int = sig val x : int end;;
#part 1
module Three : X_int = struct let x = 3 end;;
Three.x;;
#part 2
let three = (module Three : X_int);;
#part 3
module Four = struct let x = 4 end;;
let numbers = [ three; (module Four) ];;
#part 4
let numbers = [three; (module struct let x = 4 end)];;
#part 5
module New_three = (val three : X_int) ;;
New_three.x;;
#part 6
module type Y_int = X_int;;
let five = (module struct let x = 5 end : Y_int);;
[three; five];;
#part 7
[three; (module (val five))];;
#part 8
let to_int m =
    let module M = (val m : X_int) in
    M.x
  ;;
let plus m1 m2 =
    (module struct
       let x = to_int m1 + to_int m2
     end : X_int)
  ;;
#part 9
let six = plus three three;;
to_int (List.fold ~init:six ~f:plus [three;three]);;
#part 10
let to_int (module M : X_int) = M.x ;;
#part 11
module type Bumpable = sig
    type t
    val bump : t -> t
  end;;
#part 12
module Int_bumper = struct
    type t = int
    let bump n = n + 1
  end;;
module Float_bumper = struct
     type t = float
     let bump n = n +. 1.
  end;;
#part 13
let int_bumper = (module Int_bumper : Bumpable);;
#part 14
let (module Bumpable) = int_bumper in Bumpable.bump 3;;
#part 15
let int_bumper = (module Int_bumper : Bumpable with type t = int);;
let float_bumper = (module Float_bumper : Bumpable with type t = float);;
#part 16
let (module Bumpable) = int_bumper in Bumpable.bump 3;;
let (module Bumpable) = float_bumper in Bumpable.bump 3.5;;
#part 17
let bump_list
       (type a)
       (module B : Bumpable with type t = a)
       (l: a list)
    =
    List.map ~f:B.bump l
  ;;
#part 18
bump_list int_bumper [1;2;3];;
bump_list float_bumper [1.5;2.5;3.5];;
#part 19
let wrap_in_list (type a) (x:a) = [x];;
#part 20
let wrap_int_in_list (type a) (x:a) = x + x;;
#part 21
module type Comparable = sig
    type t
    val compare : t -> t -> int
  end ;;
let create_comparable (type a) compare =
    (module struct
       type t = a
       let compare = compare
     end : Comparable with type t = a)
  ;;
create_comparable Int.compare;;
create_comparable Float.compare;;
