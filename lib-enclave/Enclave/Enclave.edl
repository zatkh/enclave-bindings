enclave {
    from "sgx_tstdc.edl" import *;
    include "../ocall_types.h" // Need to import some type declartions from stdlib
    include "../sgx_lib_stdio.h"
    from "sgx_tae_service.edl" import *;
    include "time.h"




    trusted {
         public void test_ecall (void);
         public void test_main (void);
         public void ecall_main(int argc, [user_check]char **argv); 
        // public void ecall_box_open(int argc, [user_check]char **argv);
         public int ecall_nacl_main(int argc,[user_check] char **argv);

    };

    untrusted {

  
        int get_raws([in, string]const char* path);

        void ocall_println_string([in, string] const char *str);
        void ocall_print_string([in, string] const char *str);
        void ocall_print_error([in, string] const char *str);

       // int ocall_lstat([in, string] const char *path, [in, out, size=size] struct stat *buf, size_t size) propagate_errno;
        //int ocall_stat([in, string] const char *path, [in, out, size=size] struct stat *buf, size_t size);
        //int ocall_fstat(int fd, [in, out, size=size] struct stat* buf, size_t size);
        int ocall_ftruncate(int fd, off_t length);

        char* ocall_getcwd([out, size=size] char *buf, size_t size) propagate_errno;
        int ocall_getpid(void);
        int ocall_getuid(void);
        char* ocall_getenv([in, string] const char *name);

        int ocall_open64([in, string] const char *filename, int flags, mode_t mode);
        int ocall_close(int fd);
        off_t ocall_lseek64(int fd, off_t offset, int whence) propagate_errno;
        int ocall_read(int fd, [out, size=count] void *buf, size_t count) propagate_errno;
        int ocall_write(int fd, [in, size=count] const void *buf, size_t count) propagate_errno;
        int ocall_fsync(int fd);
        int ocall_fcntl(int fd, int cmd, [in, size=size] void* arg, size_t size) propagate_errno;
        int ocall_unlink([in, string] const char *pathname);


        FILE* fopen_ocall([in,string] const char* filename, [in,string] const char* mode);
        int fclose_ocall([user_check] FILE* stream);
        void ocall_fprintf([user_check]FILE *stream, [in, string] const char *format);
        void ocall_fscanf([user_check]FILE *stream, [in, string] const char *format);
        void rewind_ocall([user_check] FILE* file);
        int ocall_lns([user_check] FILE* file);
        char* ocall_readln([user_check]FILE* file) propagate_errno;
        int ocall_fprint_string(SGX_WRAPPER_FILE stream, [in, string] const char* s);

        //time_t ocall_time([in]time_t *t);
	    //int ocall_gettimeofday([user_check] struct timeval* tv, [user_check] struct timezone* tz);        int ocall_clock_gettime( [user_check] struct timespec *tp);
        clock_t ocall_clock(void);

         time_t ocall_time( [out] time_t *t);
        int ocall_gettimeofday([out, size=tv_size] void *tv, int tv_size, [in, size=tz_size] void *tz, int tz_size);
        int ocall_gettimeofday2([out, size=tv_size] void *tv, int tv_size);




    };
};
